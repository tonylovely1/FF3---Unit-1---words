<!DOCTYPE html>
<!-- saved from url=(0132)blob:https://2l967i96o4z8adfm31bo3eksoirnsf87uidml7ua2lih1t14mh-h813239537.scf.usercontent.goog/458354b1-acf4-4f0c-9cf5-a92869ef8764 -->
<html lang="vi"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script>(function(firebaseConfig, initialAuthToken, appId) {
        window.__firebase_config = firebaseConfig;
        window.__initial_auth_token = initialAuthToken;
        window.__app_id = appId;
            })("\n{\n  \"apiKey\": \"AIzaSyCqyCcs2R2e7AegGjvFAwG98wlamtbHvZY\",\n  \"authDomain\": \"bard-frontend.firebaseapp.com\",\n  \"projectId\": \"bard-frontend\",\n  \"storageBucket\": \"bard-frontend.firebasestorage.app\",\n  \"messagingSenderId\": \"175205271074\",\n  \"appId\": \"1:175205271074:web:2b7bd4d34d33bf38e6ec7b\"\n}\n","eyJhbGciOiJSUzI1NiIsImtpZCI6ImU0NDI2OTFlYmNlMzcyOGEzZWQzMTYxNjYwY2NiYTJmNGNkMTMyOTQiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJmaXJlYmFzZS1hZG1pbnNkay1mYnN2Y0BiYXJkLWZyb250ZW5kLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwiYXVkIjoiaHR0cHM6Ly9pZGVudGl0eXRvb2xraXQuZ29vZ2xlYXBpcy5jb20vZ29vZ2xlLmlkZW50aXR5LmlkZW50aXR5dG9vbGtpdC52MS5JZGVudGl0eVRvb2xraXQiLCJ1aWQiOiIwMzM0NjgyMDU3NTM5NjI0MDA0NiIsImlzcyI6ImZpcmViYXNlLWFkbWluc2RrLWZic3ZjQGJhcmQtZnJvbnRlbmQuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJjbGFpbXMiOnsiYXBwSWQiOiIyOWU1MTU1MWMwZGEtVm9jYWJ1bGFyeU1hdGNoLmh0bWwtNjc5In0sImV4cCI6MTc1OTY0Mjc3NiwiaWF0IjoxNzU5NjM5MTc2LCJhbGciOiJSUzI1NiJ9.JjqDrlDLP6s5iiDT6O1DPzIdEZ0xVyB1bg6uol4Goiqz0kdDMs7C5UOqwStp9aeMxUBY6NG9PZNgOUCWvfgo-JN8PcFp7Oxp7MzzBboM6jElKQi7nTRoWfHmwVkQvnB9AYfE6zM13nPjes5SkdapMoML9-ft7PGeTbqJf3ozZQC1kLmUOvzaZFun7MYtUIjSI18Lycr--Pl07uSCVM5EkSWAs9sbm2JhdRXeKf4E3TH2cmgaW5WPMf63zyrAXc_G0xfjhOSBIsBsD2lE-IqXBTAybLYHm1r13K6UemUPkluZTbYvV4_Cn5W7xzZOGkktBn8XH-SuQYASEFOo5k_1eg","29e51551c0da-VocabularyMatch.html-679")</script><script>'use strict';var h=typeof Object.defineProperties=="function"?Object.defineProperty:function(a,b,d){if(a==Array.prototype||a==Object.prototype)return a;a[b]=d.value;return a};function l(a){a=["object"==typeof globalThis&&globalThis,a,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var b=0;b<a.length;++b){var d=a[b];if(d&&d.Math==Math)return d}throw Error("Cannot find global object");}var n=l(this);
function p(a,b){if(b)a:{var d=n;a=a.split(".");for(var c=0;c<a.length-1;c++){var e=a[c];if(!(e in d))break a;d=d[e]}a=a[a.length-1];c=d[a];b=b(c);b!=c&&b!=null&&h(d,a,{configurable:!0,writable:!0,value:b})}}function r(a){function b(c){return a.next(c)}function d(c){return a.throw(c)}return new Promise(function(c,e){function f(g){g.done?c(g.value):Promise.resolve(g.value).then(b,d).then(f,e)}f(a.next())})}function t(a){return r(a())}
p("Object.values",function(a){return a?a:function(b){var d=[],c;for(c in b)Object.prototype.hasOwnProperty.call(b,c)&&d.push(b[c]);return d}});p("Array.prototype.includes",function(a){return a?a:function(b,d){var c=this;c instanceof String&&(c=String(c));var e=c.length;d=d||0;for(d<0&&(d=Math.max(d+e,0));d<e;d++){var f=c[d];if(f===b||Object.is(f,b))return!0}return!1}});/*

 MIT License

 Copyright (c) 2017-2023 W.Y.

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

*/
function u(a,b){const d=a.style;b.backgroundColor&&(d.backgroundColor=b.backgroundColor);b.width&&(d.width=`${b.width}px`);b.height&&(d.height=`${b.height}px`);const c=b.style;c!=null&&Object.keys(c).forEach(e=>{d[e]=c[e]})};var v=(()=>{let a=0;return()=>{a+=1;return`u${`0000${(Math.random()*1679616<<0).toString(36)}`.slice(-4)}${a}`}})();function w(a){const b=[];for(let d=0,c=a.length;d<c;d++)b.push(a[d]);return b}let x=null;function y(a={}){return x?x:a.l?x=a.l:x=w(window.getComputedStyle(document.documentElement))}function z(a,b){return(a=(a.ownerDocument.defaultView||window).getComputedStyle(a).getPropertyValue(b))?parseFloat(a.replace("px","")):0}
function A(a,b={}){var d;if(!(d=b.width)){d=z(a,"border-left-width");var c=z(a,"border-right-width");d=a.clientWidth+d+c}(b=b.height)||(b=z(a,"border-top-width"),c=z(a,"border-bottom-width"),b=a.clientHeight+b+c);return{width:d,height:b}}function B(a){return new Promise((b,d)=>{const c=new Image;c.onload=()=>{c.decode().then(()=>{requestAnimationFrame(()=>b(c))})};c.onerror=d;c.crossOrigin="anonymous";c.decoding="async";c.src=a})}
function C(a){return t(function*(){return Promise.resolve().then(()=>(new XMLSerializer).serializeToString(a)).then(encodeURIComponent).then(b=>`data:image/svg+xml;charset=utf-8,${b}`)})}
function D(a,b,d){return t(function*(){const c=document.createElementNS("http://www.w3.org/2000/svg","svg"),e=document.createElementNS("http://www.w3.org/2000/svg","foreignObject");c.setAttribute("width",`${b}`);c.setAttribute("height",`${d}`);c.setAttribute("viewBox",`0 0 ${b} ${d}`);e.setAttribute("width","100%");e.setAttribute("height","100%");e.setAttribute("x","0");e.setAttribute("y","0");e.setAttribute("externalResourcesRequired","true");c.appendChild(e);e.appendChild(a);return C(c)})}
var E=(a,b)=>{if(a instanceof b)return!0;a=Object.getPrototypeOf(a);return a===null?!1:a.constructor.name===b.name||E(a,b)};function F(a,b){return y(b).map(d=>{const c=a.getPropertyValue(d),e=a.getPropertyPriority(d);return`${d}: ${c}${e?" !important":""};`}).join(" ")}
function G(a,b,d,c){a=window.getComputedStyle(a,d);var e=a.getPropertyValue("content");if(e!==""&&e!=="none"){var f=v();try{b.className=`${b.className} ${f}`}catch(k){return}e=document.createElement("style");var g=e.appendChild;d=`.${f}:${d}`;a.cssText?(c=a.getPropertyValue("content"),c=`${a.cssText} content: '${c.replace(/'|"/g,"")}';`):c=F(a,c);g.call(e,document.createTextNode(`${d}{${c}}`));b.appendChild(e)}};function H(a){return a.search(/^(data:)/)!==-1}function I(a,b,d){return t(function*(){const c=yield fetch(a,b);if(c.status===404)throw Error(`Resource "${c.url}" not found`);const e=yield c.blob();return new Promise((f,g)=>{const k=new FileReader;k.onerror=g;k.onloadend=()=>{try{f(d({o:c,result:k.result}))}catch(m){g(m)}};k.readAsDataURL(e)})})}const J={};function K(a,b,d){let c=a.replace(/\?.*/,"");d&&(c=a);/ttf|otf|eot|woff2?/i.test(c)&&(c=c.replace(/.*\//,""));return b?`[${b}]${c}`:c}
function L(a,b,d){return t(function*(){const c=K(a,b,d.C);if(J[c]!=null)return J[c];d.u&&(a+=(/\?/.test(a)?"&":"?")+(new Date).getTime());let e;try{const f=yield I(a,d.i,({o:g,result:k})=>{b||(b=g.headers.get("Content-Type")||"");return k.split(/,/)[1]});e=`data:${b};base64,${f}`}catch(f){e=d.B||""}return J[c]=e})};const M={P:"application/font-woff",R:"application/font-woff",N:"application/font-truetype",v:"application/vnd.ms-fontobject",H:"image/png",F:"image/jpeg",D:"image/jpeg",A:"image/gif",M:"image/tiff",L:"image/svg+xml",O:"image/webp"};function N(a){return(a=/\.([^./]*?)$/g.exec(a))?a[1]:""};function O(a){return t(function*(){const b=a.toDataURL();return b==="data:,"?a.cloneNode(!1):B(b)})}function aa(a,b){return t(function*(){if(a.currentSrc){var d=document.createElement("canvas");const c=d.getContext("2d");d.width=a.clientWidth;d.height=a.clientHeight;c==null||c.drawImage(a,0,0,d.width,d.height);d=d.toDataURL();return B(d)}d=a.poster;d=yield L(d,M[N(d).toLowerCase()]||"",b);return B(d)})}
function ba(a,b){return t(function*(){try{let d;if(a==null?0:(d=a.contentDocument)==null?0:d.body)return yield P(a.contentDocument.body,b,!0)}catch(d){}return a.cloneNode(!1)})}function ca(a,b){return t(function*(){return E(a,HTMLCanvasElement)?O(a):E(a,HTMLVideoElement)?aa(a,b):E(a,HTMLIFrameElement)?ba(a,b):a.cloneNode(a.tagName!=null&&a.tagName.toUpperCase()==="SVG")})}
function da(a,b,d){return t(function*(){if(b.tagName!=null&&b.tagName.toUpperCase()==="SVG")return b;let c=[];if(a.tagName!=null&&a.tagName.toUpperCase()==="SLOT"&&a.assignedNodes)c=w(a.assignedNodes());else{let e;if(E(a,HTMLIFrameElement)&&((e=a.contentDocument)==null?0:e.body))c=w(a.contentDocument.body.childNodes);else{let f;c=w(((f=a.shadowRoot)!=null?f:a).childNodes)}}if(c.length===0||E(a,HTMLVideoElement))return b;yield c.reduce((e,f)=>e.then(()=>P(f,d)).then(g=>{g&&b.appendChild(g)}),Promise.resolve());
return b})}function ea(a,b,d){const c=b.style;if(c){var e=window.getComputedStyle(a);e.cssText?(c.cssText=e.cssText,c.transformOrigin=e.transformOrigin):y(d).forEach(f=>{let g=e.getPropertyValue(f);f==="font-size"&&g.endsWith("px")&&(g=`${Math.floor(parseFloat(g.substring(0,g.length-2)))-.1}px`);E(a,HTMLIFrameElement)&&f==="display"&&g==="inline"&&(g="block");f==="d"&&b.getAttribute("d")&&(g=`path(${b.getAttribute("d")})`);c.setProperty(f,g,e.getPropertyPriority(f))})}}
function fa(a,b){E(a,HTMLSelectElement)&&(b=Array.from(b.children).find(d=>a.value===d.getAttribute("value")))&&b.setAttribute("selected","")}
function ha(a,b){return t(function*(){var d=a.querySelectorAll?a.querySelectorAll("use"):[];if(d.length===0)return a;var c={};for(var e=0;e<d.length;e++){var f=d[e].getAttribute("xlink:href");if(f){const g=document.querySelector(f);a.querySelector(f)||!g||c[f]||(c[f]=yield P(g,b,!0))}}d=Object.values(c);if(d.length){c=document.createElementNS("http://www.w3.org/1999/xhtml","svg");c.setAttribute("xmlns","http://www.w3.org/1999/xhtml");c.style.position="absolute";c.style.width="0";c.style.height="0";
c.style.overflow="hidden";c.style.display="none";e=document.createElementNS("http://www.w3.org/1999/xhtml","defs");c.appendChild(e);for(f=0;f<d.length;f++)e.appendChild(d[f]);a.appendChild(c)}return a})}
function P(a,b,d){return t(function*(){return d||!b.filter||b.filter(a)?Promise.resolve(a).then(c=>ca(c,b)).then(c=>da(a,c,b)).then(c=>{E(c,Element)&&(ea(a,c,b),G(a,c,":before",b),G(a,c,":after",b),E(a,HTMLTextAreaElement)&&(c.textContent=a.value),E(a,HTMLInputElement)&&c.setAttribute("value",a.value),fa(a,c));return c}).then(c=>ha(c,b)):null})};const Q=/url\((['"]?)([^'"]+?)\1\)/g,ia=/url\([^)]+\)\s*format\((["']?)([^"']+)\1\)/g,ja=/src:\s*(?:url\([^)]+\)\s*format\([^)]+\)[,;]\s*)+/g;function ka(a){const b=[];a.replace(Q,(d,c,e)=>{b.push(e);return d});return b.filter(d=>!H(d))}
function la(a,b,d,c){return t(function*(){try{const e=d?(new URL(b,d||void 0)).toString():b;let f;f=yield L(e,M[N(b).toLowerCase()]||"",c);return a.replace(new RegExp(`(url\\(['"]?)(${b.replace(/([.*+?^${}()|\[\]\/\\])/g,"\\$1")})(['"]?\\))`,"g"),`$1${f}$3`)}catch(e){}return a})}function ma(a,{I:b}){return b?a.replace(ja,d=>{for(;;){const [c,,e]=ia.exec(d)||[],f=c,g=e;if(!g)return"";if(g===b)return`src: ${f};`}}):a}
function R(a,b,d){return t(function*(){if(a.search(Q)===-1)return a;const c=ma(a,d);return ka(c).reduce((e,f)=>e.then(g=>la(g,f,b,d)),Promise.resolve(c))})};function S(a,b,d){return t(function*(){var c;const e=(c=b.style)==null?void 0:c.getPropertyValue(a);return e?(c=yield R(e,null,d),b.style.setProperty(a,c,b.style.getPropertyPriority(a)),!0):!1})}function na(a,b){return t(function*(){(yield S("background",a,b))||(yield S("background-image",a,b));(yield S("mask",a,b))||(yield S("-webkit-mask",a,b))||(yield S("mask-image",a,b))||(yield S("-webkit-mask-image",a,b))})}
function oa(a,b){return t(function*(){const d=E(a,HTMLImageElement);if(d&&!H(a.src)||E(a,SVGImageElement)&&!H(a.href.baseVal)){var c=d?a.src:a.href.baseVal,e=yield L(c,M[N(c).toLowerCase()]||"",b);yield new Promise((f,g)=>{a.onload=f;a.onerror=b.m?(...k)=>{try{f(b.m(...k))}catch(m){g(m)}}:g;a.decode&&(a.decode=f);a.loading==="lazy"&&(a.loading="eager");d?(a.srcset="",a.src=e):a.href.baseVal=e})}})}
function pa(a,b){return t(function*(){const d=w(a.childNodes).map(c=>T(c,b));yield Promise.all(d).then(()=>a)})}function T(a,b){return t(function*(){E(a,Element)&&(yield na(a,b),yield oa(a,b),yield pa(a,b))})};const U={};function V(a){return t(function*(){var b=U[a];if(b!=null)return b;b=yield(yield fetch(a)).text();b={url:a,cssText:b};return U[a]=b})}function W(a,b){return t(function*(){let d=a.cssText;const c=/url\(["']?([^"')]+)["']?\)/g,e=(d.match(/url\([^)]+\)/g)||[]).map(f=>t(function*(){let g=f.replace(c,"$1");g.startsWith("https://")||(g=(new URL(g,a.url)).href);return I(g,b.i,({result:k})=>{d=d.replace(f,`url(${k})`);return[f,k]})}));return Promise.all(e).then(()=>d)})}
function X(a){if(a==null)return[];const b=[];a=a.replace(/(\/\*[\s\S]*?\*\/)/gi,"");for(var d=RegExp("((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})","gi");;){var c=d.exec(a);if(c===null)break;b.push(c[0])}a=a.replace(d,"");d=/@import[\s\S]*?url\([^)]*\)[\s\S]*?;/gi;for(c=RegExp("((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)})","gi");;){let e=d.exec(a);if(e===null)if(e=c.exec(a),e===null)break;else d.lastIndex=c.lastIndex;else c.lastIndex=
d.lastIndex;b.push(e[0])}return b}
function qa(a,b){return t(function*(){const d=[],c=[];a.forEach(e=>{if("cssRules"in e)try{w(e.cssRules||[]).forEach((f,g)=>{if(f.type===CSSRule.IMPORT_RULE){let k=g+1;f=V(f.href).then(m=>W(m,b)).then(m=>X(m).forEach(q=>{try{e.insertRule(q,q.startsWith("@import")?k+=1:e.cssRules.length)}catch(Da){}})).catch(()=>{});c.push(f)}})}catch(f){const g=a.find(k=>k.href==null)||document.styleSheets[0];e.href!=null&&c.push(V(e.href).then(k=>W(k,b)).then(k=>X(k).forEach(m=>{g.insertRule(m,g.cssRules.length)})).catch(()=>
{}))}});return Promise.all(c).then(()=>{a.forEach(e=>{if("cssRules"in e)try{w(e.cssRules||[]).forEach(f=>{d.push(f)})}catch(f){}});return d})})}function ra(a){return a.filter(b=>b.type===CSSRule.FONT_FACE_RULE).filter(b=>b.style.getPropertyValue("src").search(Q)!==-1)}function sa(a,b){return t(function*(){if(a.ownerDocument==null)throw Error("Provided element is not within a Document");var d=w(a.ownerDocument.styleSheets);d=yield qa(d,b);return ra(d)})}
function ta(a){function b(c){(c.style.fontFamily||getComputedStyle(c).fontFamily).split(",").forEach(e=>{d.add(e.trim().replace(/["']/g,""))});Array.from(c.children).forEach(e=>{e instanceof HTMLElement&&b(e)})}const d=new Set;b(a);return d}function ua(a,b){return t(function*(){const d=yield sa(a,b),c=ta(a);return(yield Promise.all(d.filter(e=>c.has(e.style.fontFamily.trim().replace(/["']/g,""))).map(e=>R(e.cssText,e.parentStyleSheet?e.parentStyleSheet.href:null,b)))).join("\n")})}
function va(a,b){return t(function*(){const d=b.j!=null?b.j:b.K?null:yield ua(a,b);if(d){const c=document.createElement("style");c.appendChild(document.createTextNode(d));a.firstChild?a.insertBefore(c,a.firstChild):a.appendChild(c)}})};function wa(a,b={}){return t(function*(){const {width:d,height:c}=A(a,b),e=yield P(a,b,!0);yield va(e,b);yield T(e,b);u(e,b);return yield D(e,d,c)})}
function xa(a,b={}){return t(function*(){const {width:d,height:c}=A(a,b);var e=yield wa(a,b);e=yield B(e);const f=document.createElement("canvas"),g=f.getContext("2d"),k=b.G||window.devicePixelRatio||1,m=b.h||d,q=b.g||c;f.width=m*k;f.height=q*k;!b.J&&(f.width>16384||f.height>16384)&&(f.width>16384&&f.height>16384?f.width>f.height?(f.height*=16384/f.width,f.width=16384):(f.width*=16384/f.height,f.height=16384):f.width>16384?(f.height*=16384/f.width,f.width=16384):(f.width*=16384/f.height,f.height=
16384));f.style.width=`${m}`;f.style.height=`${q}`;b.backgroundColor&&(g.fillStyle=b.backgroundColor,g.fillRect(0,0,f.width,f.height));g.drawImage(e,0,0,f.width,f.height);return f})}function ya(a,b={}){return t(function*(){return(yield xa(a,b)).toDataURL()})};const za=["gemini.google.com","corp.google.com","proxy.googlers.com"];function Y(){return document.body.querySelectorAll('[class*="animate"]').length>0}function Z(a){return t(function*(){try{return yield ya(a,{h:a.offsetWidth,g:a.offsetHeight})}catch(d){var b=a.offsetHeight;const c=document.createElement("canvas");c.width=a.offsetWidth;c.height=b;return c.toDataURL("image/png")}})}
function Aa(){return t(function*(){const a=document.body.offsetWidth,b=document.body.offsetHeight,d=document.body.cloneNode(!0);d.querySelectorAll('[class*="animate"]').forEach(c=>{c.classList.remove(...Array.from(c.classList).filter(e=>e.startsWith("animate")))});d.style.width=`${a}px`;d.style.height=`${b}px`;return d})}
function Ba(a){return t(function*(){let b=document.body;if(Y()){var d=yield Aa();b=d;document.body.appendChild(d)}d=yield Z(b);Y()&&document.body.removeChild(b);window.parent.postMessage({type:"SEND_SCREENSHOT",image:d,topOffset:document.documentElement.scrollTop},a.origin)})}function Ca(a){return t(function*(){const b={type:"SEND_SCREENSHOT_FOR_DATA_VISUALIZATION",image:yield Z(document.body),topOffset:0};window.parent.postMessage(b,a.origin)})}
window.addEventListener("message",a=>t(function*(){if(za.some(d=>a.origin.includes(d))){var b=a.data;b&&(b.type==="MAKE_SCREENSHOT"&&(yield Ba(a)),b.type==="MAKE_SCREENSHOT_FOR_DATA_VISUALIZATION"&&(yield Ca(a)))}}));
</script><script>(function() {
  // Ensure this script is executed only once
  if (window.firebaseAuthBridgeScriptLoaded) {
    return;
  }
  window.firebaseAuthBridgeScriptLoaded = true;

  let nextTokenPromiseId = 0;

  // Stores { resolve, reject } for ongoing token requests
  const pendingTokenPromises = {};

  // Listen for messages from the Host Application
  window.addEventListener('message', function(event) {

    const messageData = event.data;

  if (messageData && messageData.type === 'RESOLVE_NEW_FIREBASE_TOKEN') {
      const { success, token, error, promiseId } = messageData ?? {};
      if (pendingTokenPromises[promiseId]) {
        if (success) {
          pendingTokenPromises[promiseId].resolve(token);
        } else {
          pendingTokenPromises[promiseId].reject(new Error(error || 'Token refresh failed from host.'));
        }
        delete pendingTokenPromises[promiseId];
      }
    }
  });

  // Expose a function for the Generated App to request a new Firebase token
  window.requestNewFirebaseToken = function() {
    const currentPromiseId = nextTokenPromiseId++;
    const promise = new Promise((resolve, reject) => {
      pendingTokenPromises[currentPromiseId] = { resolve, reject };
    });
    if (window.parent && window.parent !== window) {
      window.parent.postMessage({
        type: 'REQUEST_NEW_FIREBASE_TOKEN',
        promiseId: currentPromiseId
      }, '*');
    } else {
      pendingTokenPromises[currentPromiseId].reject(new Error('No parent window to request token from.'));
      delete pendingTokenPromises[currentPromiseId];
    }
    return promise;
  };
})();</script><script>
let realOriginalGetUserMedia = null;
if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
  realOriginalGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
}

(function() {
  if (navigator.mediaDevices && navigator.mediaDevices.__proto__) {
    try {
      Object.defineProperty(navigator.mediaDevices.__proto__, 'getUserMedia', {
        get: function() {
          return undefined; // Or throw an error
        },
        configurable: false
      });
    } catch (error) {
      console.error("Error defining prototype getter:", error);
    }
  }
})();

(function() {
  const pendingMediaResolvers = {};
  let nextMediaPromiseId = 0;

  function requestMediaPermissions(constraints) {
    const mediaPromiseId = nextMediaPromiseId++;
    const promise = new Promise((resolve, reject) => {
      pendingMediaResolvers[mediaPromiseId] = (granted) => {
        delete pendingMediaResolvers[mediaPromiseId];
        resolve(granted);
      };
    });

    window.parent.postMessage({
      type: 'requestMediaPermission',
      constraints: constraints,
      promiseId: mediaPromiseId,
    }, '*');

    return promise;
  }

  let originalGetUserMedia = realOriginalGetUserMedia;

  function interceptGetUserMedia() {
    if (navigator.mediaDevices) {
      Object.defineProperty(navigator.mediaDevices, 'getUserMedia', {
        value: function(constraints) {
          return requestMediaPermissions(constraints).then((granted) => {
            if (granted) {
              if (originalGetUserMedia) {
                return originalGetUserMedia(constraints);
              } else {
                throw new Error("Original getUserMedia not available.");
              }
            } else {
              throw new DOMException('Permission denied', 'NotAllowedError');
            }
          });
        },
        writable: false,
        configurable: false
      });
    }
  }

  interceptGetUserMedia();

  const observer = new MutationObserver(function(mutationsList, observer) {
    for (const mutation of mutationsList) {
      if (mutation.type === 'reconfigured' && mutation.name === 'getUserMedia' && mutation.object === navigator.mediaDevices) {
        interceptGetUserMedia();
      } else if (mutation.type === 'attributes' && mutation.attributeName === 'getUserMedia' && mutation.target === navigator.mediaDevices) {
        interceptGetUserMedia();
      } else if (mutation.type === 'childList' && mutation.addedNodes) {
        mutation.addedNodes.forEach(node => {
          if (node === navigator.mediaDevices) {
            interceptGetUserMedia();
          }
        });
      }
    }
  });

  function interceptSpeechRecognition() {
    if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {
      return;
    }

    const OriginalSpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

    const SpeechRecognitionWrapper = function(...args) {
      const recognizer = new OriginalSpeechRecognition(...args);
      const originalStart = recognizer.start.bind(recognizer);

      recognizer.start = function() {
        requestMediaPermissions({ audio: true }).then(granted => {
          if (granted) {
            originalStart();
          } else {
            const errorEvent = new SpeechRecognitionErrorEvent('error');
            errorEvent.error = 'not-allowed'; // This is the standard error for permission denial.
            recognizer.dispatchEvent(errorEvent);
          }
        });
      };

      return recognizer;
    };

    SpeechRecognitionWrapper.prototype = OriginalSpeechRecognition.prototype;
    SpeechRecognitionWrapper.prototype.constructor = SpeechRecognitionWrapper;

    if (window.SpeechRecognition) {
      window.SpeechRecognition = SpeechRecognitionWrapper;
    }
    if (window.webkitSpeechRecognition) {
      window.webkitSpeechRecognition = SpeechRecognitionWrapper;
    }
  }

  interceptSpeechRecognition();

  window.addEventListener('message', function(event) {
    if (event.data) {
      if (event.data.type === 'resolveMediaPermission') {
        const { promiseId, granted } = event.data;
        if (pendingMediaResolvers[promiseId]) {
          pendingMediaResolvers[promiseId](granted);
        }
      }
    }
  });

})();</script><script>((function(modelInformation) {
  const originalFetch = window.fetch;
  // TODO: b/421908508 - Move these out of the script and match all generative AI model calls.
  let googleLlmBaseApiUrls = [
    'https://generativelanguage.googleapis.com/v1beta/models/' + modelInformation.textModelName + ':streamGenerateContent',
    'https://generativelanguage.googleapis.com/v1beta/models/' + modelInformation.textModelName + ':generateContent',
    'https://generativelanguage.googleapis.com/v1beta/models/' + modelInformation.imageModelName + ':predict',
    'https://generativelanguage.googleapis.com/v1beta/models/' + modelInformation.imageModelName + ':predictLongRunning',
    'https://generativelanguage.googleapis.com/v1beta/models/' + modelInformation.imageEditModelName + ':generateContent',
    'https://generativelanguage.googleapis.com/v1beta/models/' + modelInformation.videoModelName + ':predict',
    'https://generativelanguage.googleapis.com/v1beta/models/' + modelInformation.videoModelName + ':predictLongRunning',
    'https://generativelanguage.googleapis.com/v1beta/models/' + modelInformation.ttsModelName + ':generateContent',
  ];
  modelInformation.deprecatedTextModelNames.forEach((modelName) => {
    googleLlmBaseApiUrls.push(
      'https://generativelanguage.googleapis.com/v1beta/models/' + modelName + ':streamGenerateContent',
      'https://generativelanguage.googleapis.com/v1beta/models/' + modelName + ':generateContent',
    );
  });

  const pendingFetchResolvers = {};
  let nextPromiseId = 0;

  function handleStringInput(input, optionsArgument) {
    const actualUrl = input;
    const fetchCallArgs = [actualUrl, optionsArgument];
    const effectiveOptions = optionsArgument || {};
    const bodyForApiKeyCheck = effectiveOptions.body;
    const bodyForPostMessage = effectiveOptions.body;
    return { actualUrl, fetchCallArgs, effectiveOptions, bodyForApiKeyCheck, bodyForPostMessage };
  }

  function handleRequestInput(input, optionsArgument) {
    const actualUrl = input.url;
    const fetchCallArgs = [input, optionsArgument];
    const effectiveOptions = { method: input.method, headers: new Headers(input.headers) };
    let bodyForApiKeyCheck;
    let bodyForPostMessage;

    if (optionsArgument) {
      if (optionsArgument.method) effectiveOptions.method = optionsArgument.method;
      if (optionsArgument.headers) effectiveOptions.headers = new Headers(optionsArgument.headers);
      if ('body' in optionsArgument) {
        bodyForApiKeyCheck = optionsArgument.body;
        bodyForPostMessage = optionsArgument.body;
      } else {
        bodyForApiKeyCheck = undefined;
        bodyForPostMessage = input.body;
      }
    } else {
      bodyForApiKeyCheck = undefined;
      bodyForPostMessage = input.body;
    }
    return { actualUrl, fetchCallArgs, effectiveOptions, bodyForApiKeyCheck, bodyForPostMessage };
  }

  window.fetch = function(input, optionsArgument) {
    let actualUrl;
    let fetchCallArgs;
    let effectiveOptions = {};
    let bodyForApiKeyCheck;
    let bodyForPostMessage;

    if (typeof input === 'string') {
      ({actualUrl, fetchCallArgs, effectiveOptions, bodyForApiKeyCheck, bodyForPostMessage} = handleStringInput(input, optionsArgument));
    } else if (input instanceof Request) {
      ({actualUrl, fetchCallArgs, effectiveOptions, bodyForApiKeyCheck, bodyForPostMessage} = handleRequestInput(input, optionsArgument));
    } else {
      return originalFetch.apply(window, [input, optionsArgument]);
    }

    effectiveOptions.method = effectiveOptions.method || 'GET';
    if (!effectiveOptions.headers) {
      effectiveOptions.headers = new Headers();
    }


    if (typeof actualUrl === 'string' && googleLlmBaseApiUrls.some((url) => actualUrl.startsWith(url))) {
      let apiKeyIsNull = true;

      const regex = new RegExp("models/([^:]+)");
      const modelNameMatch = actualUrl.match(regex);
      const modelName = modelNameMatch ? modelNameMatch[1] : 'unspecified';


      try {
        const urlObject = new URL(actualUrl);  // Use URL object for robust parsing
        const apiKeyParam = urlObject.searchParams.get('key');
        if (apiKeyParam) {
          apiKeyIsNull = false;
        }
      } catch (e) {
        // Continue checks even if URL parsing fails
      }

      if (apiKeyIsNull && effectiveOptions.headers) {
        const h = new Headers(effectiveOptions.headers);
        const apiKeyHeaderValue = h.get('X-API-Key') || h.get('x-api-key');
        if (apiKeyHeaderValue) {
          apiKeyIsNull = false;
          return originalFetch.apply(window, fetchCallArgs);
        }
      }

      if (apiKeyIsNull && effectiveOptions.method && ['POST', 'PUT', 'PATCH'].includes(effectiveOptions.method.toUpperCase()) && typeof bodyForApiKeyCheck === 'string') {
        try {
          const bodyData = JSON.parse(bodyForApiKeyCheck);
          if (bodyData && bodyData.apiKey) {
            apiKeyIsNull = false;
            return originalFetch.apply(window, fetchCallArgs);
          }
        } catch (e) {
          // Ignore JSON parsing errors
        }
      }

      if(apiKeyIsNull) {
        const promiseId = nextPromiseId++;
        const promise = new Promise((resolve) => {
          pendingFetchResolvers[promiseId] = (resolvedResponse) => {
            delete pendingFetchResolvers[promiseId];
            resolve(resolvedResponse);
          };
        });

        let serializedBodyForPostMessage;
        if (typeof bodyForPostMessage === 'string' || bodyForPostMessage == null) {
            serializedBodyForPostMessage = bodyForPostMessage;
        } else if (bodyForPostMessage instanceof ReadableStream) {
            serializedBodyForPostMessage = null;
        } else {
            try {
                serializedBodyForPostMessage = JSON.stringify(bodyForPostMessage);
            } catch (e) {
                serializedBodyForPostMessage = null;
            }
        }

        const messageOptions = {
            method: effectiveOptions.method,
            headers: Object.fromEntries(new Headers(effectiveOptions.headers).entries()),
            body: serializedBodyForPostMessage
        };

        window.parent.postMessage({
          type: 'requestFetch',
          url: actualUrl,
          modelName: modelName,
          options: messageOptions,
          promiseId: promiseId,
        }, '*');

        return promise;
      }
      return originalFetch.apply(window, fetchCallArgs);
    }
    return originalFetch.apply(window, fetchCallArgs);
  };

  window.addEventListener('message', function(event) {
    if (event.data && event.data.type === 'resolveFetch') {
      const { promiseId, response } = event.data;
      if (pendingFetchResolvers[promiseId]) {
        try {
          const reconstructedResponse = new Response(response.body, {
            status: response.status,
            statusText: response.statusText,
            headers: new Headers(response.headers),
          });
          pendingFetchResolvers[promiseId](reconstructedResponse);
        } catch (error) {
          pendingFetchResolvers[promiseId](new Response(null, { status: 500, statusText: "Interceptor Response Reconstruction Error" }));
        }
      }
    }
  });

}))({"textModelName":"gemini-2.5-flash-preview-05-20","imageModelName":"imagen-3.0-generate-002","imageEditModelName":"gemini-2.5-flash-image-preview","videoModelName":"veo-2.0-generate-001","ttsModelName":"gemini-2.5-flash-preview-tts","deprecatedTextModelNames":["gemini-2.0-flash","gemini-2.5-flash-preview-04-17"]})</script><script>(function() {
  const originalConsoleLog = console.log;
  const originalConsoleError = console.error;

    /**
   * Normalizes an error event or a promise rejection reason into a structured error object.
   * @param {*} errorEventOrReason The error object or reason.
   * @return {object} Structured error data { message, name, stack }.
   */
  function getErrorObject(errorEventOrReason) {
    if (errorEventOrReason instanceof Error) {
      return {
        message: errorEventOrReason.message,
        name: errorEventOrReason.name,
        stack: errorEventOrReason.stack,
      };
    }
    // Fallback for non-Error objects.
    try {
      return {
        message: JSON.stringify(errorEventOrReason),
        name: 'UnknownErrorType',
        stack: null,
      };
    } catch (e) {
      return {
        message: String(errorEventOrReason),
        name: 'UnknownErrorTypeNonStringifiable',
        stack: null,
      };
    }
  }

  /**
   * Converts an array of arguments (from log/error) into a single string.
   * Handles Error objects specially to include their message and stack.
   * @param {Array<*>} args - Arguments passed to console methods.
   * @return {string} A string representation of the arguments.
   */
  function stringifyArgs(args) {
    return args
      .map((arg) => {
        if (arg instanceof Error) {
          const {message, stack} = arg;
          return `Error: ${message}${stack ? ('\nStack: ' + stack) : ''}`;
        }
        if (typeof arg === 'object' && arg !== null) {
          try {
            return JSON.stringify(arg);
          } catch (error) {
            return '[Circular Object]';
          }
        } else {
          return String(arg);
        }
      })
      .join(' ');
  }

  console.log = function(...args) {
    const logString = stringifyArgs(args);
    window.parent.postMessage({ type: 'log', message: logString }, '*');
    originalConsoleLog.apply(console, args);
  };

  console.error = function(...args) {
    let errorData;
    if (args.length > 0 && args[0] instanceof Error) {
      const err = args[0];
      // If the first arg is an Error, capture its details.
      errorData = {
        type: 'error',
        source: 'CONSOLE_ERROR',
        ...getErrorObject(err),
        rawArgsString: stringifyArgs(args.slice(1)),
        timestamp: new Date().toISOString(),
      };
    } else {
      // If not an Error object, treat all args as a general error message.
      errorData = {
        type: 'error',
        source: 'CONSOLE_ERROR',
        message: stringifyArgs(args),
        name: 'ConsoleLoggedError',
        stack: null,
        timestamp: new Date().toISOString(),
      };
    }
    window.parent.postMessage(errorData, '*');
    originalConsoleError.apply(console, args);
  };

  // Listen for global unhandled synchronous errors.
  window.addEventListener('error', function(event) {
    const errorDetails = event.error ? getErrorObject(event.error) : {
      message: event.message,
      name: 'GlobalError',
      stack: null,
      filename: event.filename,
      lineno: event.lineno,
      colno: event.colno,
    };

    window.parent.postMessage({
      type: 'error',
      source: 'global',
      ...errorDetails,
      message: errorDetails.message || event.message,
      timestamp: new Date().toISOString(),
    }, '*');
  });

  // Listen for unhandled promise rejections (asynchronous errors).
  window.addEventListener('unhandledrejection', function(event) {
    const errorDetails = getErrorObject(event.reason);

    window.parent.postMessage({
      type: 'error',
      source: 'unhandledrejection',
      ...errorDetails,
      message: errorDetails.message || 'Unhandled Promise Rejection',
      timestamp: new Date().toISOString(),
    }, '*');
  });

})();</script>
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sắp Xếp Chữ Cái (Từng Từ) | Unscramble</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com/"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght400;600;800;900&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f9ff;
            user-select: none;
        }
        .card-shadow {
            box-shadow: 0 15px 25px rgba(0, 0, 0, 0.1), 0 5px 10px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s;
        }
        
        /* Draggable Letter Styles */
        .letter-pill {
            cursor: grab;
            transition: all 0.2s;
        }

        /* Styles for used (faded) letters - stays visible but inactive */
        .letter-pill[data-is-used="true"] {
            opacity: 0.3;
            cursor: default;
            box-shadow: none;
        }

        /* Floating Clone Styles */
        .dragging-clone {
            position: fixed;
            pointer-events: none; 
            z-index: 1000;
            opacity: 0.95; 
            transform: scale(1.05);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.4);
            font-weight: 800;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem; 
        }

        /* Letter Slot (Target) Styles */
        .letter-slot {
            width: 56px;
            height: 56px;
            border: 2px solid #38bdf8; /* Blue */
            border-radius: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.875rem; /* text-3xl */
            font-weight: 800;
            color: #1e40af; /* Blue-800 */
            transition: all 0.2s;
            background-color: #ffffff; /* Default white background */
        }
        
        /* State styles: PENDING (placed but not checked) */
        .letter-slot[data-is-filled="true"]:not([data-is-locked="true"]) {
            background-color: #fef3c7; /* Yellow-100 */
            border-color: #fbbf24; /* Amber-400 */
            color: #4b5563; /* Gray-700 */
        }

        /* Highlight hint for drop zone */
        .zone-hint {
            border-color: #fcd34d !important; 
            background-color: #fffbeb !important;
            box-shadow: 0 0 10px rgba(252, 211, 77, 0.7);
        }
        
        /* State styles: CORRECT (after check) */
        .letter-slot.bg-green-500 {
             background-color: #10b981; 
             color: white;
             border-color: #059669;
        }

        /* State styles: INCORRECT (after check) */
        .letter-slot.bg-red-500 {
            background-color: #f43f5e; 
            color: white;
            border-color: #dc2626;
        }
        
        /* State styles: COMPLETED (word finished) */
        .letter-slot.bg-lime-500 {
            background-color: #84cc16; 
            color: white;
            transform: scale(1.05);
            border-color: #65a30d;
        }

        .icon-text {
            font-size: 6rem;
            line-height: 1;
            opacity: 0.9; 
        }
    </style>
<style>*, ::before, ::after{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }/* ! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com */*,::after,::before{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}::after,::before{--tw-content:''}:host,html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-family:ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;font-feature-settings:normal;font-variation-settings:normal;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;letter-spacing:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button,input:where([type=button]),input:where([type=reset]),input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]:where(:not([hidden=until-found])){display:none}.fixed{position:fixed}.inset-0{inset:0px}.z-50{z-index:50}.mx-auto{margin-left:auto;margin-right:auto}.mb-2{margin-bottom:0.5rem}.mb-3{margin-bottom:0.75rem}.mb-4{margin-bottom:1rem}.mb-6{margin-bottom:1.5rem}.mb-8{margin-bottom:2rem}.mt-6{margin-top:1.5rem}.mb-1{margin-bottom:0.25rem}.mt-4{margin-top:1rem}.flex{display:flex}.hidden{display:none}.h-8{height:2rem}.min-h-screen{min-height:100vh}.w-full{width:100%}.w-32{width:8rem}.max-w-4xl{max-width:56rem}.max-w-md{max-width:28rem}.transform{transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.select-none{-webkit-user-select:none;user-select:none}.flex-col{flex-direction:column}.flex-wrap{flex-wrap:wrap}.items-center{align-items:center}.justify-center{justify-content:center}.gap-3{gap:0.75rem}.gap-4{gap:1rem}.gap-6{gap:1.5rem}.whitespace-nowrap{white-space:nowrap}.rounded-2xl{border-radius:1rem}.rounded-xl{border-radius:0.75rem}.rounded-full{border-radius:9999px}.border-b-4{border-bottom-width:4px}.border-b-8{border-bottom-width:8px}.border-blue-500{--tw-border-opacity:1;border-color:rgb(59 130 246 / var(--tw-border-opacity, 1))}.border-green-500{--tw-border-opacity:1;border-color:rgb(34 197 94 / var(--tw-border-opacity, 1))}.bg-blue-600{--tw-bg-opacity:1;background-color:rgb(37 99 235 / var(--tw-bg-opacity, 1))}.bg-gray-100{--tw-bg-opacity:1;background-color:rgb(243 244 246 / var(--tw-bg-opacity, 1))}.bg-gray-900{--tw-bg-opacity:1;background-color:rgb(17 24 39 / var(--tw-bg-opacity, 1))}.bg-green-600{--tw-bg-opacity:1;background-color:rgb(22 163 74 / var(--tw-bg-opacity, 1))}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255 / var(--tw-bg-opacity, 1))}.bg-orange-500{--tw-bg-opacity:1;background-color:rgb(249 115 22 / var(--tw-bg-opacity, 1))}.bg-opacity-70{--tw-bg-opacity:0.7}.p-4{padding:1rem}.p-6{padding:1.5rem}.p-8{padding:2rem}.px-8{padding-left:2rem;padding-right:2rem}.py-3{padding-top:0.75rem;padding-bottom:0.75rem}.px-4{padding-left:1rem;padding-right:1rem}.py-2{padding-top:0.5rem;padding-bottom:0.5rem}.text-center{text-align:center}.text-3xl{font-size:1.875rem;line-height:2.25rem}.text-6xl{font-size:3.75rem;line-height:1}.text-xl{font-size:1.25rem;line-height:1.75rem}.font-bold{font-weight:700}.font-extrabold{font-weight:800}.font-medium{font-weight:500}.font-semibold{font-weight:600}.text-blue-500{--tw-text-opacity:1;color:rgb(59 130 246 / var(--tw-text-opacity, 1))}.text-blue-700{--tw-text-opacity:1;color:rgb(29 78 216 / var(--tw-text-opacity, 1))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128 / var(--tw-text-opacity, 1))}.text-gray-600{--tw-text-opacity:1;color:rgb(75 85 99 / var(--tw-text-opacity, 1))}.text-gray-700{--tw-text-opacity:1;color:rgb(55 65 81 / var(--tw-text-opacity, 1))}.text-green-700{--tw-text-opacity:1;color:rgb(21 128 61 / var(--tw-text-opacity, 1))}.text-white{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity, 1))}.opacity-90{opacity:0.9}.shadow-2xl{--tw-shadow:0 25px 50px -12px rgb(0 0 0 / 0.25);--tw-shadow-colored:0 25px 50px -12px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.shadow-lg{--tw-shadow:0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.shadow-xl{--tw-shadow:0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.shadow-md{--tw-shadow:0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.transition{transition-property:color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}.duration-300{transition-duration:300ms}.duration-150{transition-duration:150ms}.hover\:scale-105:hover{--tw-scale-x:1.05;--tw-scale-y:1.05;transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.hover\:bg-blue-700:hover{--tw-bg-opacity:1;background-color:rgb(29 78 216 / var(--tw-bg-opacity, 1))}.hover\:bg-green-700:hover{--tw-bg-opacity:1;background-color:rgb(21 128 61 / var(--tw-bg-opacity, 1))}.hover\:bg-orange-600:hover{--tw-bg-opacity:1;background-color:rgb(234 88 12 / var(--tw-bg-opacity, 1))}.active\:shadow-none:active{--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}@media (min-width: 768px){.md\:mb-0{margin-bottom:0px}.md\:mr-10{margin-right:2.5rem}.md\:flex-row{flex-direction:row}.md\:gap-4{gap:1rem}.md\:p-6{padding:1.5rem}.md\:p-8{padding:2rem}.md\:text-4xl{font-size:2.25rem;line-height:2.5rem}}</style></head>
<body class="p-4 md:p-8 min-h-screen">

    <div id="game-container" class="max-w-4xl mx-auto">
        <h1 class="text-3xl md:text-4xl font-extrabold text-blue-700 mb-2 text-center">Trò Chơi Sắp Xếp Chữ Cái <span class="text-gray-500">| Unscramble</span></h1>
        <p class="text-center text-gray-500 mb-6 font-medium">Sắp xếp các chữ cái để tạo thành từ vựng tiếng Anh tương ứng với biểu tượng, sau đó nhấn **"Kiểm Tra"**. | Arrange the letters to form the English word matching the icon, then click **"Check"**.</p>

        <!-- GAME AREA -->
        <div class="bg-white p-6 md:p-8 rounded-2xl shadow-xl card-shadow mb-8 border-b-4 border-blue-500">
            
            <h2 class="text-xl font-bold text-gray-700 mb-6 text-center">Từ Vựng Hiện Tại <span class="text-gray-500">| Current Word:</span> <span id="word-counter" class="text-blue-500">1/7</span></h2>
            
            <!-- TARGETS (ICONS + LETTER SLOTS) - Displays only one word row -->
            <div id="target-container" class="flex flex-col gap-6 items-center"><div class="flex flex-col md:flex-row items-center justify-center p-4" data-word-index="0"><div class="flex flex-col items-center justify-center mb-3 md:mb-0 md:mr-10 w-32">
                <span class="icon-text text-6xl opacity-90 mb-1">🪁</span>
            </div><div class="flex gap-3 mt-4"><div class="letter-slot" data-correct-letter="K" data-slot-index="0" data-word-index="0" data-is-filled="false" data-is-locked="false" data-dropped-letter="" data-source-pill-id=""></div><div class="letter-slot" data-correct-letter="I" data-slot-index="1" data-word-index="0" data-is-filled="false" data-is-locked="false" data-dropped-letter="" data-source-pill-id=""></div><div class="letter-slot" data-correct-letter="T" data-slot-index="2" data-word-index="0" data-is-filled="false" data-is-locked="false" data-dropped-letter="" data-source-pill-id=""></div><div class="letter-slot" data-correct-letter="E" data-slot-index="3" data-word-index="0" data-is-filled="false" data-is-locked="false" data-dropped-letter="" data-source-pill-id=""></div></div></div></div>

            <p id="feedback-message" class="h-8 text-xl text-center font-bold text-gray-500 mt-6"><span class="text-gray-500 font-semibold">Hãy sắp xếp từ này! | Arrange this word!</span></p>

        </div>

        <!-- LETTER BANK AREA -->
        <div id="word-bank" class="bg-gray-100 p-4 md:p-6 rounded-2xl shadow-lg card-shadow mb-8">
            <h2 class="text-xl font-bold text-gray-700 mb-4 text-center">Kho Chữ Cái (Kéo thả) <span class="text-gray-500">| Letter Bank (Drag &amp; Drop):</span></h2>
            <div class="flex flex-wrap justify-center gap-3 md:gap-4" id="word-bank-container"><div data-letter="I" data-id="letter-bank-0-0" data-is-used="false" class="letter-pill word-pill bg-orange-500 text-white text-xl font-bold py-2 px-4 rounded-full shadow-md transition duration-150 hover:bg-orange-600 active:shadow-none whitespace-nowrap select-none">I</div><div data-letter="E" data-id="letter-bank-0-1" data-is-used="false" class="letter-pill word-pill bg-orange-500 text-white text-xl font-bold py-2 px-4 rounded-full shadow-md transition duration-150 hover:bg-orange-600 active:shadow-none whitespace-nowrap select-none">E</div><div data-letter="K" data-id="letter-bank-0-2" data-is-used="false" class="letter-pill word-pill bg-orange-500 text-white text-xl font-bold py-2 px-4 rounded-full shadow-md transition duration-150 hover:bg-orange-600 active:shadow-none whitespace-nowrap select-none">K</div><div data-letter="T" data-id="letter-bank-0-3" data-is-used="false" class="letter-pill word-pill bg-orange-500 text-white text-xl font-bold py-2 px-4 rounded-full shadow-md transition duration-150 hover:bg-orange-600 active:shadow-none whitespace-nowrap select-none">T</div></div>
        </div>

        <!-- CONTROL BUTTONS -->
        <div class="text-center mt-6 flex justify-center gap-4">
             <button id="check-button" onclick="checkWord()" class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-8 rounded-xl transition duration-300 transform hover:scale-105 shadow-xl text-xl">
                Kiểm Tra | Check
            </button>
             <button id="reset-button" onclick="initializeGame(true)" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-xl transition duration-300 transform hover:scale-105 shadow-xl text-xl">
                🔄 Chơi Lại Từ Đầu | Restart Game
            </button>
        </div>

    </div>

    <!-- WINNING MODAL -->
    <div id="modal" class="fixed inset-0 bg-gray-900 bg-opacity-70 flex items-center justify-center p-4 z-50 hidden" onclick="if(event.target.id === &#39;modal&#39;) initializeGame(true)">
        <div class="bg-white p-8 rounded-2xl shadow-2xl text-center max-w-md w-full border-b-8 border-green-500">
            <div class="text-6xl mb-4">🏆🎉</div>
            <h2 class="text-3xl font-bold text-green-700 mb-3">HOÀN THÀNH TUYỆT VỜI! | AMAZING COMPLETION!</h2>
            <p class="text-xl text-gray-600 mb-6">Bạn đã sắp xếp đúng **tất cả** 7 từ vựng! | You correctly arranged **all** 7 words!</p>
            <button onclick="initializeGame(true)" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-xl transition duration-300 transform hover:scale-105 shadow-lg">
                Chơi Lại | Play Again
            </button>
        </div>
    </div>

    <script>
        // Danh sách từ vựng được cập nhật lên 7 từ, tên trò chơi là Unscramble
        let VOCAB_DATA = [
            { id: 1, word: "kite", vietnamese: "diều", icon: "🪁" },
            { id: 2, word: "bike", vietnamese: "xe đạp", icon: "🚲" },
            { id: 3, word: "train", vietnamese: "tàu hỏa", icon: "🚂" }, // Thêm từ mới
            { id: 4, word: "teddybear", vietnamese: "gấu bông", icon: "🧸" }, // Thêm từ mới (viết liền để phù hợp cơ chế game)
            { id: 5, word: "ball", vietnamese: "quả bóng", icon: "⚽" }, 
            { id: 6, word: "doll", vietnamese: "búp bê", icon: "👧" }, 
            { id: 7, word: "car", vietnamese: "xe ô tô", icon: "🚗" }
        ];

        // --- GAME STATE ---
        let currentMatches = 0; // Số từ đã hoàn thành đúng
        let totalItems = VOCAB_DATA.length;
        let currentWordIndex = 0; // Index của từ hiện tại đang chơi

        // --- DRAG AND DROP STATE ---
        let draggingElement = null; 
        let currentDraggedLetter = null; // Chữ cái đang kéo
        let sourceElement = null; // Viên chữ cái gốc (trong bank)

        // --- UTILITY FUNCTIONS ---

        /** Xáo trộn các phần tử trong một mảng (Fisher-Yates) */
        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        // --- UI GENERATION & RENDERING ---

        /** Cập nhật số đếm từ đang chơi */
        function updateWordCounter() {
            document.getElementById('word-counter').textContent = `${currentWordIndex + 1}/${totalItems}`;
        }

        /** Hiển thị từ vựng hiện tại (icon và ô trống) */
        function renderCurrentWord() {
            const container = document.getElementById('target-container');
            container.innerHTML = ''; 
            
            const item = VOCAB_DATA[currentWordIndex];
            if (!item) {
                endGame(); 
                return;
            }

            const wordRow = document.createElement('div');
            wordRow.className = 'flex flex-col md:flex-row items-center justify-center p-4';
            wordRow.setAttribute('data-word-index', currentWordIndex); 
            
            // 1. Icon (Đã loại bỏ hiển thị từ vựng tiếng Anh)
            const iconContainer = document.createElement('div');
            iconContainer.className = 'flex flex-col items-center justify-center mb-3 md:mb-0 md:mr-10 w-32';
            iconContainer.innerHTML = `
                <span class="icon-text text-6xl opacity-90 mb-1">${item.icon}</span>
            `;
            
            // 2. Letter Slots Container
            const slotsContainer = document.createElement('div');
            slotsContainer.className = 'flex gap-3 mt-4'; 
            
            const word = item.word.toUpperCase();
            for (let i = 0; i < word.length; i++) {
                const slot = document.createElement('div');
                slot.className = 'letter-slot';
                slot.setAttribute('data-correct-letter', word[i]);
                slot.setAttribute('data-slot-index', i);
                slot.setAttribute('data-word-index', currentWordIndex); 
                slot.setAttribute('data-is-filled', 'false');
                slot.setAttribute('data-is-locked', 'false'); 
                slot.setAttribute('data-dropped-letter', '');
                slot.setAttribute('data-source-pill-id', '');
                slot.textContent = ''; 
                
                slotsContainer.appendChild(slot);
            }

            wordRow.appendChild(iconContainer);
            wordRow.appendChild(slotsContainer);
            container.appendChild(wordRow);
            
            updateWordCounter();
        }
        
        /** Tạo các chữ cái có thể kéo thả chỉ cho từ hiện tại */
        function renderLetterBank() {
            const bankContainer = document.getElementById('word-bank-container');
            bankContainer.innerHTML = ''; 
            
            const currentWord = VOCAB_DATA[currentWordIndex].word.toUpperCase();
            let allLetters = currentWord.split('');
            
            shuffle(allLetters);

            allLetters.forEach((letter, index) => {
                const partDiv = document.createElement('div');
                partDiv.setAttribute('data-letter', letter);
                partDiv.setAttribute('data-id', `letter-bank-${currentWordIndex}-${index}`); 
                partDiv.setAttribute('data-is-used', 'false'); 
                partDiv.textContent = letter;
                
                partDiv.className = 'letter-pill word-pill bg-orange-500 text-white text-xl font-bold py-2 px-4 rounded-full shadow-md transition duration-150 hover:bg-orange-600 active:shadow-none whitespace-nowrap select-none';
                
                partDiv.addEventListener('mousedown', startDragging);
                partDiv.addEventListener('touchstart', startDragging);

                bankContainer.appendChild(partDiv);
            });
        }


        // --- DRAG AND DROP HANDLERS ---
        
        function startDragging(event) {
            if (event.type === 'touchstart') {
                event.preventDefault(); 
            }

            sourceElement = event.currentTarget; 
            
            // CHỈ kéo nếu viên chữ cái chưa được sử dụng
            if (sourceElement.getAttribute('data-is-used') === 'true') {
                return; 
            }
            
            currentDraggedLetter = sourceElement.getAttribute('data-letter');

            // 1. Tạo bản sao để kéo (clone)
            draggingElement = sourceElement.cloneNode(true);
            
            draggingElement.className = ''; 
            draggingElement.classList.add(
                'dragging-clone', 
                'py-2', 
                'px-4', 
                'rounded-full', 
                'text-2xl', 
                'bg-orange-500', 
                'text-white'
            );
            
            draggingElement.textContent = currentDraggedLetter; 
            document.body.appendChild(draggingElement);
            
            // Tính độ lệch (offset)
            const clientX = event.clientX || event.touches[0].clientX;
            const clientY = event.clientY || event.touches[0].clientY;
            
            const rect = sourceElement.getBoundingClientRect();
            const initialOffsetX = clientX - rect.left;
            const initialOffsetY = clientY - rect.top;

            moveDraggingElement(clientX, clientY, initialOffsetX, initialOffsetY);

            // Gán các sự kiện di chuyển và kết thúc
            document.addEventListener('mousemove', dragMove);
            document.addEventListener('mouseup', stopDragging);
            document.addEventListener('touchmove', dragMove);
            document.addEventListener('touchend', stopDragging);
        }
        
        function dragMove(event) {
            if (!draggingElement) return;
            const clientX = event.clientX || event.touches[0].clientX;
            const clientY = event.clientY || event.touches[0].clientY;
            
            const offsetX = parseFloat(draggingElement.style.getPropertyValue('--initial-offset-x')) || 0;
            const offsetY = parseFloat(draggingElement.style.getPropertyValue('--initial-offset-y')) || 0;
            
            moveDraggingElement(clientX, clientY, offsetX, offsetY);
            
            const targetElement = document.elementFromPoint(clientX, clientY);
            highlightTarget(targetElement ? targetElement.closest('.letter-slot') : null);
        }

        function highlightTarget(slot) {
            document.querySelectorAll('.letter-slot').forEach(s => {
                s.classList.remove('zone-hint');
            });
            // Highlight chỉ khi nó là một slot và chưa được điền VÀ chưa bị khóa
            if (slot && slot.getAttribute('data-is-filled') === 'false' && slot.getAttribute('data-is-locked') !== 'true') {
                slot.classList.add('zone-hint');
            }
        }

        function moveDraggingElement(x, y, offsetX, offsetY) {
            if (draggingElement) {
                draggingElement.style.left = `${x - offsetX}px`;
                draggingElement.style.top = `${y - offsetY}px`;
                draggingElement.style.setProperty('--initial-offset-x', offsetX);
                draggingElement.style.setProperty('--initial-offset-y', offsetY);
            }
        }

        function stopDragging(event) {
            if (!draggingElement) return;

            const clientX = event.clientX || (event.changedTouches && event.changedTouches[0].clientX);
            const clientY = event.clientY || (event.changedTouches && event.changedTouches[0].clientY);
            
            // Tạm thời ẩn clone để xác định phần tử dưới nó
            draggingElement.style.display = 'none';
            const targetElement = document.elementFromPoint(clientX, clientY);
            draggingElement.style.display = 'flex'; 
            
            let dropSlot = targetElement ? targetElement.closest('.letter-slot') : null;

            highlightTarget(null);

            // 1. Thực hiện thao tác thả: Chỉ chấp nhận thả vào ô chưa điền VÀ chưa bị khóa (locked)
            if (dropSlot && dropSlot.getAttribute('data-is-filled') === 'false' && dropSlot.getAttribute('data-is-locked') !== 'true') {
                handleDrop(dropSlot, currentDraggedLetter, sourceElement);
            } 

            // 2. Dọn dẹp
            draggingElement.remove();
            draggingElement = null;
            currentDraggedLetter = null;
            sourceElement = null;
            
            document.removeEventListener('mousemove', dragMove);
            document.removeEventListener('mouseup', stopDragging);
            document.addEventListener('touchmove', dragMove);
            document.removeEventListener('touchend', stopDragging);
        }
        
        /** Logic xử lý khi chữ cái được thả vào ô trống (Chỉ đặt, không kiểm tra) */
        function handleDrop(dropSlot, droppedLetter, sourcePill) {
            const feedbackElement = document.getElementById('feedback-message');
            
            // 1. Điền vào slot
            dropSlot.setAttribute('data-is-filled', 'true');
            dropSlot.setAttribute('data-dropped-letter', droppedLetter); 
            dropSlot.setAttribute('data-source-pill-id', sourcePill.getAttribute('data-id')); 
            
            dropSlot.textContent = droppedLetter;
            // Class styling will be applied via CSS selector for data-is-filled
            
            // 2. Vô hiệu hóa viên chữ cái nguồn
            sourcePill.setAttribute('data-is-used', 'true');
            sourcePill.classList.add('opacity-30', 'pointer-events-none', 'cursor-default'); 
            
            feedbackElement.innerHTML = `<span class="text-gray-600 font-semibold">Đã đặt chữ cái. Hãy tiếp tục sắp xếp. | Letter placed. Keep going.</span>`;

            // Kiểm tra xem đã điền đủ chưa
            const allSlots = document.querySelectorAll('.letter-slot');
            const filledSlots = document.querySelectorAll('.letter-slot[data-is-filled="true"]').length;
            if (filledSlots === allSlots.length) {
                 feedbackElement.innerHTML = `<span class="text-blue-600 font-extrabold">Đã đủ chữ cái! Nhấn 'Kiểm Tra' để xem kết quả. | All letters placed! Press 'Check'.</span>`;
            }
        }

        /** Kiểm tra xem từ hiện tại đã được sắp xếp đúng chưa */
        function checkWord() {
            const wordRow = document.querySelector(`[data-word-index="${currentWordIndex}"]`);
            const allSlots = wordRow.querySelectorAll('.letter-slot');
            const feedbackElement = document.getElementById('feedback-message');
            let isWordCorrect = true;
            let allFilled = true;

            // 1. Kiểm tra xem tất cả các ô đã được điền chưa
            allSlots.forEach(slot => {
                if (slot.getAttribute('data-is-filled') === 'false') {
                    allFilled = false;
                }
            });
            
            if (!allFilled) {
                feedbackElement.innerHTML = `<span class="text-red-600 font-extrabold">Vui lòng điền đủ tất cả các ô chữ cái trước khi kiểm tra! | Please fill all letter slots before checking!</span>`;
                return;
            }

            // 2. Kiểm tra tính đúng đắn và cập nhật màu sắc
            allSlots.forEach(slot => {
                const correctLetter = slot.getAttribute('data-correct-letter');
                const droppedLetter = slot.getAttribute('data-dropped-letter');
                
                // Xóa tất cả các lớp trạng thái trước đó
                slot.classList.remove('bg-red-500', 'bg-green-500', 'bg-lime-500', 'border-red-600', 'border-green-600', 'border-lime-600');
                slot.style.backgroundColor = ''; // Xóa màu nền của state PENDING
                slot.style.borderColor = ''; // Xóa màu viền của state PENDING

                if (droppedLetter === correctLetter) {
                    slot.classList.add('bg-green-500', 'text-white', 'border-green-600');
                } else {
                    isWordCorrect = false;
                    slot.classList.add('bg-red-500', 'text-white', 'border-red-600');
                }
            });
            
            // 3. Xử lý kết quả
            if (isWordCorrect) {
                // THÀNH CÔNG: Chuyển sang từ tiếp theo
                currentMatches++;
                feedbackElement.innerHTML = `<span class="text-lime-700 font-extrabold text-xl">🎉 Chính xác! Từ tiếp theo... | Correct! Next word...</span>`;

                // Khóa tất cả các ô sang màu xanh chanh hoàn chỉnh
                allSlots.forEach(slot => {
                     slot.classList.remove('bg-green-500', 'border-green-600');
                     slot.classList.add('bg-lime-500', 'border-lime-600');
                });
                
                if (currentMatches === totalItems) {
                    setTimeout(endGame, 1000);
                } else {
                     setTimeout(() => {
                        currentWordIndex++;
                        initializeGame(false); // Tải từ mới
                     }, 2000);
                }
            } else {
                // THẤT BẠI: Dọn các ô sai và giải phóng chữ cái tương ứng
                feedbackElement.innerHTML = `<span class="text-red-600 font-extrabold">❌ Sai rồi! Hãy thử sắp xếp lại nhé! | Incorrect! Wrong letters cleared, please try again!</span>`;
                
                allSlots.forEach(slot => {
                    const correctLetter = slot.getAttribute('data-correct-letter');
                    const droppedLetter = slot.getAttribute('data-dropped-letter');
                    
                    if (droppedLetter !== correctLetter) {
                        // Reset ô sai
                        slot.setAttribute('data-is-filled', 'false');
                        slot.setAttribute('data-dropped-letter', '');
                        
                        // Giải phóng viên chữ cái nguồn
                        const sourcePillId = slot.getAttribute('data-source-pill-id');
                        const sourcePill = document.querySelector(`[data-id="${sourcePillId}"]`);
                        
                        if (sourcePill) {
                            sourcePill.setAttribute('data-is-used', 'false');
                            sourcePill.classList.remove('opacity-30', 'pointer-events-none', 'cursor-default'); 
                            sourcePill.classList.add('cursor-grab');
                        }
                        
                        // Xóa nội dung và reset style
                        slot.textContent = '';
                        slot.classList.remove('bg-red-500', 'text-white', 'border-red-600');
                        slot.classList.add('bg-white', 'border-blue-400');
                        
                    } else {
                        // Khóa các ô đã đúng
                        slot.setAttribute('data-is-locked', 'true');
                        // Các ô này giữ màu xanh lá và chữ cái nguồn bị khóa vĩnh viễn
                        
                        // Cần đảm bảo các ô đúng đã được khóa, ngăn không cho kéo thả vào đó
                        slot.classList.remove('bg-lime-500', 'border-lime-600', 'bg-red-500', 'border-red-600');
                        slot.classList.add('bg-green-500', 'text-white', 'border-green-600', 'cursor-default');
                    }
                });
            }
        }

        /** Kết thúc trò chơi */
        function endGame() {
            document.getElementById('modal').classList.remove('hidden');
        }

        /** Khởi tạo hoặc Reset Game hoàn toàn */
        function initializeGame(reset = false) {
            if (reset) {
                document.getElementById('modal').classList.add('hidden');
                currentMatches = 0;
                currentWordIndex = 0; // Reset index khi bắt đầu game mới
                VOCAB_DATA = shuffle(VOCAB_DATA); 
            } else if (currentWordIndex >= totalItems) {
                endGame();
                return;
            }
            
            totalItems = VOCAB_DATA.length;
            
            document.getElementById('feedback-message').innerHTML = '<span class="text-gray-500 font-semibold">Hãy sắp xếp từ này! | Arrange this word!</span>';
            
            renderCurrentWord();
            renderLetterBank(); 
        }
        
        // --- GAME START ---
        window.onload = () => initializeGame(true);

        // Expose functions for buttons
        window.initializeGame = initializeGame;
        window.checkWord = checkWord;
    </script>


</body></html>
